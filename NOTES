1. installed Microsoft.EntityFrameworkCore.Sqlite version 7.0.0 rather than 7.0.7

- dotnet watch --no-hot-reload

- dotnet restore // in case packages aren't loading in vscode properly

- Stop API server whenever you create a new migration.
run in root folder (Reactivities)
dotnet ef migrations add IdentityAdded -p Persistence -s API
<!-- Learning Goals 11 -->

- AspNetCore.Identity

  - Membership System
  - Supports login stored in Identity
  - Supports external providers?
  - Come with default user stores?
  - User Manager
  - Sign in Manager

- JWT Token Authentication

Members are the declarations within an interface that define the shape and structure of the object that adheres to the interface. Each member has a name (the "key") and a type that represents the expected data type of the value (the "value").

// element:
<Component>
<ChildComponent />
</Component>

// void element:
<Component />

# Check lesson 303 for oncoming issues with vite migration, especially commentStore

dotnet ef migrations add ActivityAttendee -p Persistence -s API

dotnet ef: The .NET CLI command for Entity Framework Core.

migrations: Used for managing database migrations, which are a way to version and update your database schema as your application evolves.

add ActivityAttendee: Specifying the name of the migration being added.
Conventionally, when you create a join table, which is what this is, then you'll specify the name of the two entities as the name of the join table.
Migrations are used to capture changes to the database schema over time, such as adding, modifying, or removing database tables and columns.

-p Persistence: Specifies the project where your DbContext and EF Core configuration are located.
The -p option is followed by the name of the project folder, which is typically where your data access code is implemented.

-s API: Specifies the project where your startup code and application entry point are located.
The -s option is followed by the name of the project folder, which typically represents your application's API or web server.

=========================================================================================
from solution level
dotnet new classlib -n Infrastructure
This command is used to create a new class library project in C# with the name "Infrastructure."

dotnet new: Base command for creating new projects and files in .NET

classlib: Template name that specifies you want to create a class library project.

-n Infrastructure: Specify the name Infrastructure for the project you want to make. The -n option is followed by the name you want to give to your project.

dotnet sln add Infrastructure
cd Infrastructure
dotnet add reference ../Application
cd ..
cd API
dotnet add reference ../Infrastructure
